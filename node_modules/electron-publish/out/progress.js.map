{"version":3,"sources":["../src/progress.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * node-progress\n * Copyright(c) 2011 TJ Holowaychuk <tj@vision-media.ca>\n * MIT Licensed\n */\n\nexport abstract class ProgressBar {\n  private stream: any\n\n  private current = 0\n  total = 0\n  private width: number\n\n  private chars: any\n  private tokens: any = null\n  private lastDraw = \"\"\n\n  private start = 0\n\n  private complete = false\n\n  /**\n   * Initialize a `ProgressBar` with the given `fmt` string and `options` or`total`.\n   *\n   * Options:\n   *   - `curr` current completed index\n   *   - `total` total number of ticks to complete\n   *   - `width` the displayed width of the progress bar defaulting to total\n   *   - `stream` the output stream defaulting to stderr\n   *   - `head` head character defaulting to complete character\n   *   - `complete` completion character defaulting to \"=\"\n   *   - `incomplete` incomplete character defaulting to \"-\"\n   *   - `renderThrottle` minimum time between updates in milliseconds defaulting to 16\n   *   - `callback` optional function to call when the progress bar completes\n   *   - `clear` will clear the progress bar upon termination\n   *\n   * Tokens:\n   *   - `:bar` the progress bar itself\n   *   - `:current` current tick number\n   *   - `:total` total ticks\n   *   - `:elapsed` time elapsed in seconds\n   *   - `:percent` completion percentage\n   *   - `:eta` eta in seconds\n   *   - `:rate` rate of ticks per second\n   */\n  constructor(private readonly format: string, options: any = {}) {\n    this.stream = options.stream || process.stderr\n\n    this.total = options.total\n    this.width = options.width || this.total\n    this.chars = {\n      complete: options.complete || \"=\",\n      incomplete: options.incomplete || \"-\",\n      head: options.head || (options.complete || \"=\")\n    }\n  }\n\n  /**\n   * \"tick\" the progress bar with optional `len` and optional `tokens`.\n   */\n  tick(delta: number) {\n    this.currentAmount = this.current + delta\n  }\n\n  set currentAmount(value: number) {\n    this.current = value\n\n    if (this.complete) {\n      return\n    }\n\n    this.render()\n\n    if (this.current >= this.total) {\n      this.complete = true\n      this.terminate()\n    }\n  }\n\n  render() {\n    // start time for eta\n    if (this.start === 0) {\n      this.start = Date.now()\n    }\n\n    const ratio = Math.min(Math.max(this.current / this.total, 0), 1)\n\n    const percent = ratio * 100\n    const elapsed = Date.now() - this.start\n    const eta = percent === 100 ? 0 : (elapsed * (this.total / this.current - 1))\n    const rate = this.current / (elapsed / 1000)\n\n    /* populate the bar template with percentages and timestamps */\n    let str = this.format\n      .replace(\":current\", this.current.toString())\n      .replace(\":total\", this.total.toString())\n      .replace(\":elapsed\", isNaN(elapsed) ? \"0.0\" : (elapsed / 1000).toFixed(1))\n      .replace(\":eta\", (isNaN(eta) || !isFinite(eta)) ? \"0.0\" : (eta / 1000).toFixed(1))\n      .replace(\":percent\", percent.toFixed(0) + \"%\")\n      .replace(\":rate\", Math.round(rate).toString())\n\n    // compute the available space (non-zero) for the bar\n    let availableSpace = Math.max(0, this.stream.columns - str.replace(\":bar\", \"\").length)\n    if (availableSpace && process.platform === \"win32\") {\n      availableSpace -= 1\n    }\n\n    const width = Math.min(this.width, availableSpace)\n    const completeLength = Math.round(width * ratio)\n    let complete = Array(Math.max(0, completeLength + 1)).join(this.chars.complete)\n    const incomplete = Array(Math.max(0, width - completeLength + 1)).join(this.chars.incomplete)\n\n    /* add head to the complete string */\n    if (completeLength > 0) {\n      complete = complete.slice(0, -1) + this.chars.head\n    }\n\n    /* fill in the actual progress bar */\n    str = str.replace(\":bar\", complete + incomplete)\n\n    /* replace the extra tokens */\n    if (this.tokens != null) {\n      for (const key of Object.keys(this.tokens)) {\n        str = str.replace(`:${key}`, this.tokens[key])\n      }\n    }\n\n    if (this.lastDraw !== str) {\n      this.stream.cursorTo(0)\n      this.stream.write(str)\n      this.stream.clearLine(1)\n      this.lastDraw = str\n    }\n  }\n\n  /**\n   * \"update\" the progress bar to represent an exact percentage.\n   * The ratio (between 0 and 1) specified will be multiplied by `total` and\n   * floored, representing the closest available \"tick.\" For example, if a\n   * progress bar has a length of 3 and `update(0.5)` is called, the progress\n   * will be set to 1.\n   *\n   * A ratio of 0.5 will attempt to set the progress to halfway.\n   */\n  update(ratio: number) {\n    const goal = Math.floor(ratio * this.total)\n    const delta = goal - this.current\n    this.tick(delta)\n  }\n\n  /**\n   * \"interrupt\" the progress bar and write a message above it.\n   */\n  interrupt(message: string) {\n    // clear the current line\n    const stream = this.stream\n    stream.clearLine()\n    // move the cursor to the start of the line\n    stream.cursorTo(0)\n    // write the message text\n    stream.write(message)\n    // terminate the line after writing the message\n    stream.write(\"\\n\")\n    // re-display the progress bar with its lastDraw\n    stream.write(this.lastDraw)\n  }\n\n  abstract terminate(): void\n}\n\nexport class ProgressCallback {\n  private start = Date.now()\n  private nextUpdate = this.start + 1000\n\n  constructor(private readonly progressBar: ProgressBar) {\n  }\n\n  update(transferred: number, total: number) {\n    const now = Date.now()\n    if (now >= this.nextUpdate || transferred >= total) {\n      this.nextUpdate = now + 1000\n\n      this.progressBar.total = total\n      this.progressBar.currentAmount = transferred\n    }\n  }\n}"],"sourceRoot":""}

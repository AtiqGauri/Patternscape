{"version":3,"sources":["../src/gitHubPublisher.ts"],"names":[],"mappings":"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","sourcesContent":["import { Arch, InvalidConfigurationError, isEmptyOrSpaces, isEnvTrue, isTokenCharValid, log } from \"builder-util\"\nimport { configureRequestOptions, GithubOptions, HttpError, parseJson } from \"builder-util-runtime\"\nimport { Fields } from \"builder-util/out/log\"\nimport { httpExecutor } from \"builder-util/out/nodeHttpExecutor\"\nimport { ClientRequest } from \"http\"\nimport { Lazy } from \"lazy-val\"\nimport mime from \"mime\"\nimport { parse as parseUrl, UrlWithStringQuery } from \"url\"\nimport { getCiTag, HttpPublisher, PublishContext, PublishOptions } from \"./publisher\"\n\nexport interface Release {\n  id: number\n  tag_name: string\n\n  draft: boolean\n  prerelease: boolean\n\n  published_at: string\n\n  upload_url: string\n}\n\ninterface Asset {\n  id: number\n  name: string\n}\n\nexport class GitHubPublisher extends HttpPublisher {\n  private readonly tag: string\n  readonly _release = new Lazy(() => this.token === \"__test__\" ? Promise.resolve(null as any) : this.getOrCreateRelease())\n\n  private readonly token: string\n\n  readonly providerName = \"GitHub\"\n\n  private readonly releaseType: \"draft\" | \"prerelease\" | \"release\"\n\n  private releaseLogFields: Fields | null = null\n\n  constructor(context: PublishContext, private readonly info: GithubOptions, private readonly version: string, private readonly options: PublishOptions = {}) {\n    super(context, true)\n\n    let token = info.token\n    if (isEmptyOrSpaces(token)) {\n      token = process.env.GH_TOKEN || process.env.GITHUB_TOKEN\n      if (isEmptyOrSpaces(token)) {\n        throw new InvalidConfigurationError(`GitHub Personal Access Token is not set, neither programmatically, nor using env \"GH_TOKEN\"`)\n      }\n\n      token = token.trim()\n\n      if (!isTokenCharValid(token)) {\n        throw new InvalidConfigurationError(`GitHub Personal Access Token (${JSON.stringify(token)}) contains invalid characters, please check env \"GH_TOKEN\"`)\n      }\n    }\n\n    this.token = token!\n\n    if (version.startsWith(\"v\")) {\n      throw new InvalidConfigurationError(`Version must not start with \"v\": ${version}`)\n    }\n\n    this.tag = info.vPrefixedTagName === false ? version : `v${version}`\n\n    if (isEnvTrue(process.env.EP_DRAFT)) {\n      this.releaseType = \"draft\"\n      log.info({reason: \"env EP_DRAFT is set to true\"}, \"GitHub provider release type is set to draft\")\n    }\n    else if (isEnvTrue(process.env.EP_PRE_RELEASE) || isEnvTrue(process.env.EP_PRELEASE) /* https://github.com/electron-userland/electron-builder/issues/2878 */) {\n      this.releaseType = \"prerelease\"\n      log.info({reason: \"env EP_PRE_RELEASE is set to true\"}, \"GitHub provider release type is set to prerelease\")\n    }\n    else if (info.releaseType != null) {\n      this.releaseType = info.releaseType\n    }\n    else if ((options as any).prerelease) {\n      this.releaseType = \"prerelease\"\n    }\n    else {\n      this.releaseType = (options as any).draft === false ? \"release\" : \"draft\"\n    }\n  }\n\n  private async getOrCreateRelease(): Promise<Release | null> {\n    const logFields = {\n      tag: this.tag,\n      version: this.version,\n    }\n\n    // we don't use \"Get a release by tag name\" because \"tag name\" means existing git tag, but we draft release and don't create git tag\n    const releases = await this.githubRequest<Array<Release>>(`/repos/${this.info.owner}/${this.info.repo}/releases`, this.token)\n    for (const release of releases) {\n      if (!(release.tag_name === this.tag || release.tag_name === this.version)) {\n        continue\n      }\n\n      if (release.draft) {\n        return release\n      }\n\n      // https://github.com/electron-userland/electron-builder/issues/1197\n      // https://github.com/electron-userland/electron-builder/issues/2072\n      if (this.releaseType === \"draft\") {\n        this.releaseLogFields = {\n          reason: \"existing type not compatible with publishing type\",\n          ...logFields,\n          existingType: release.prerelease ? \"pre-release\" : \"release\",\n          publishingType: this.releaseType,\n        }\n        log.warn(this.releaseLogFields, \"GitHub release not created\")\n        return null\n      }\n\n      // https://github.com/electron-userland/electron-builder/issues/1133\n      // https://github.com/electron-userland/electron-builder/issues/2074\n      // if release created < 2 hours — allow to upload\n      const publishedAt = release.published_at == null ? null : Date.parse(release.published_at)\n      if (publishedAt != null && (Date.now() - publishedAt) > (2 * 3600 * 1000)) {\n        // https://github.com/electron-userland/electron-builder/issues/1183#issuecomment-275867187\n        this.releaseLogFields = {\n          reason: \"existing release published more than 2 hours ago\",\n          ...logFields,\n          date: new Date(publishedAt).toString(),\n        }\n        log.warn(this.releaseLogFields, \"GitHub release not created\")\n        return null\n      }\n      return release\n    }\n\n    // https://github.com/electron-userland/electron-builder/issues/1835\n    if (this.options.publish === \"always\" || getCiTag() != null) {\n      log.info({\n        reason: \"release doesn't exist\",\n        ...logFields,\n      }, `creating GitHub release`)\n      return this.createRelease()\n    }\n\n    this.releaseLogFields = {\n      reason: \"release doesn't exist and not created because \\\"publish\\\" is not \\\"always\\\" and build is not on tag\",\n      ...logFields,\n    }\n    return null\n  }\n\n  private async overwriteArtifact(fileName: string, release: Release) {\n    // delete old artifact and re-upload\n    log.warn({file: fileName, reason: \"already exists on GitHub\"}, \"overwrite published file\")\n\n    const assets = await this.githubRequest<Array<Asset>>(`/repos/${this.info.owner}/${this.info.repo}/releases/${release.id}/assets`, this.token, null)\n    for (const asset of assets) {\n      if (asset!.name === fileName) {\n        await this.githubRequest<void>(`/repos/${this.info.owner}/${this.info.repo}/releases/assets/${asset!.id}`, this.token, null, \"DELETE\")\n        return\n      }\n    }\n\n    log.debug({file: fileName, reason: \"not found on GitHub\"}, \"trying to upload again\")\n  }\n\n  protected async doUpload(fileName: string, arch: Arch, dataLength: number, requestProcessor: (request: ClientRequest, reject: (error: Error) => void) => void): Promise<any> {\n    const release = await this._release.value\n    if (release == null) {\n      log.warn({file: fileName, ...this.releaseLogFields}, \"skipped publishing\")\n      return\n    }\n\n    const parsedUrl = parseUrl(release.upload_url.substring(0, release.upload_url.indexOf(\"{\")) + \"?name=\" + fileName)\n    return await this.doUploadFile(0, parsedUrl, fileName, dataLength, requestProcessor, release)\n  }\n\n  private doUploadFile(attemptNumber: number, parsedUrl: UrlWithStringQuery, fileName: string, dataLength: number, requestProcessor: (request: ClientRequest, reject: (error: Error) => void) => void, release: any): Promise<any> {\n    return httpExecutor.doApiRequest(configureRequestOptions({\n      hostname: parsedUrl.hostname,\n      path: parsedUrl.path,\n      method: \"POST\",\n      headers: {\n        accept: \"application/vnd.github.v3+json\",\n        \"Content-Type\": mime.getType(fileName) || \"application/octet-stream\",\n        \"Content-Length\": dataLength\n      }\n    }, this.token), this.context.cancellationToken, requestProcessor)\n      .catch(e => {\n        if ((e as any).statusCode === 422 && e.description != null && e.description.errors != null && e.description.errors[0].code === \"already_exists\") {\n          return this.overwriteArtifact(fileName, release)\n            .then(() => this.doUploadFile(attemptNumber, parsedUrl, fileName, dataLength, requestProcessor, release))\n        }\n\n        if (attemptNumber > 3) {\n          return Promise.reject(e)\n        }\n        else {\n          return new Promise((resolve, reject) => {\n            const newAttemptNumber = attemptNumber + 1\n            setTimeout(() => {\n              this.doUploadFile(newAttemptNumber, parsedUrl, fileName, dataLength, requestProcessor, release)\n                .then(resolve)\n                .catch(reject)\n            }, newAttemptNumber * 2000)\n          })\n        }\n      })\n  }\n\n  private createRelease() {\n    return this.githubRequest<Release>(`/repos/${this.info.owner}/${this.info.repo}/releases`, this.token, {\n      tag_name: this.tag,\n      name: this.version,\n      draft: this.releaseType === \"draft\",\n      prerelease: this.releaseType === \"prerelease\",\n    })\n  }\n\n  // test only\n  //noinspection JSUnusedGlobalSymbols\n  async getRelease(): Promise<any> {\n    return this.githubRequest<Release>(`/repos/${this.info.owner}/${this.info.repo}/releases/${(await this._release.value)!.id}`, this.token)\n  }\n\n  //noinspection JSUnusedGlobalSymbols\n  async deleteRelease(): Promise<any> {\n    if (!this._release.hasValue) {\n      return\n    }\n\n    const release = await this._release.value\n    for (let i = 0; i < 3; i++) {\n      try {\n        return await this.githubRequest(`/repos/${this.info.owner}/${this.info.repo}/releases/${release.id}`, this.token, null, \"DELETE\")\n      }\n      catch (e) {\n        if (e instanceof HttpError) {\n          if (e.statusCode === 404) {\n            log.warn({releaseId: release.id, reason: \"doesn't exist\"}, \"cannot delete release\")\n            return\n          }\n          else if (e.statusCode === 405 || e.statusCode === 502) {\n            continue\n          }\n        }\n\n        throw e\n      }\n    }\n\n    log.warn({releaseId: release.id}, \"cannot delete release\")\n  }\n\n  private githubRequest<T>(path: string, token: string | null, data: {[name: string]: any; } | null = null, method?: \"GET\" | \"DELETE\" | \"PUT\"): Promise<T> {\n    // host can contains port, but node http doesn't support host as url does\n    const baseUrl = parseUrl(`https://${this.info.host || \"api.github.com\"}`)\n    return parseJson(httpExecutor.request(configureRequestOptions({\n      hostname: baseUrl.hostname,\n      port: baseUrl.port as any,\n      path: (this.info.host != null && this.info.host !== \"github.com\") ? `/api/v3${path.startsWith(\"/\") ? path : `/${path}`}` : path,\n      headers: {accept: \"application/vnd.github.v3+json\"}\n    }, token, method), this.context.cancellationToken, data))\n  }\n\n  toString() {\n    return `Github (owner: ${this.info.owner}, project: ${this.info.repo}, version: ${this.version})`\n  }\n}\n"],"sourceRoot":""}
